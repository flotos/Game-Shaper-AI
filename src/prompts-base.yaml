# src/prompts-base.yaml
# Prompts adapted for BASE LLM models

common:
  moxus_feedback_system_message: |
    You are Moxus, an AI assistant. Your role is to identify problems with prior AI responses and provide CRITICAL feedback.
    Review the following VITAL feedback data, paying close attention to any user notes included.
    ---start of feedback data---
    {moxus_llm_calls_memory_yaml}
    ---end of feedback data---
    Use this feedback to inform your future responses, avoiding repetition of mistakes and prioritizing user notes. Failure to adhere to this guidance will lead to suboptimal outcomes.
    When ready to provide feedback based on this (and other information like chat history with user notes), you will formulate it clearly.
  moxus_get_feedback_user_message: "Provide feedback based on available information. Focus on user notes in chat history, as they contain important suggestions. Your feedback should be a single, concise paragraph."

twine_import:
  data_extraction: |
    Given the following Twine story content:
    ---start of twine content---
    {twine_content}
    ---end of twine content---
    {additional_instructions}

    The extracted structured data, focusing on key story elements (characters, locations, events, items, concepts, paragraphs), preserving narrative structures and branching paths, while omitting irrelevant technical/formatting elements, for game node generation, is as follows in JSON format:
    ```json
    {
      "elements": [
  node_generation_new_game: |
    The following JSON describes a new game generated from extracted story data.
    This creates a coherent game world using new nodes. 'updateImage: true' is set for physical entities.
    Events are interpreted as future outcomes; locations as unvisited encounters.
    Allowed node types: 'assistant', 'image-generation', 'system', 'character', 'location', 'event', 'item', 'object', 'mechanic', 'concept', 'library'.
    {additional_instructions}

    Extracted Story Data:
    ---
    {extracted_data}
    ---

    Existing Nodes (for structure reference ONLY):
    ---
    {nodes_description}
    ---

    Generated game nodes:
    ```json
    {
      "new": [
  node_generation_merge: |
    Extracted story data is being merged into the existing game world. The primary goal is to update existing nodes, creating new ones only when necessary. All existing node content is preserved and enhanced. 'updateImage: true' is used for significant visual changes. Events are treated as possible future outcomes, and locations as unvisited encounters.
    Allowed node types: 'assistant', 'image-generation', 'system', 'character', 'location', 'event', 'item', 'object', 'mechanic', 'concept', 'library'.
    {additional_instructions}

    Extracted Story Data:
    ---
    {extracted_data}
    ---

    Existing Nodes to Merge With:
    ---
    {nodes_description}
    ---

    The resulting node updates and additions are as follows in JSON format:
    ```json
    {
      "new": [
  regenerate_single_node: |
    The game node with ID '{node_id_to_regenerate}' is being regenerated.
    User instructions: {node_generation_instructions}

    Original Node (from the game):
    ---
    id: {existing_node_id}
    name: {existing_node_name}
    longDescription: {existing_node_long_description}
    rules: {existing_node_rules}
    type: {existing_node_type}
    ---

    Recently Generated Node (needs improvement, for reference):
    ---
    {recently_generated_node_details}
    ---

    Extracted Story Data (for context):
    ---
    {extracted_data}
    ---

    Existing Nodes (for context):
    ---
    {nodes_description}
    ---

    The regenerated node data for ID '{node_id_to_regenerate}' is provided below in JSON format.
    If it's fundamentally a new version, use the "new" array. If it's an update to the existing structure, use the "update" array.
    ```json
    {
image_generation:
  base_prompt_with_instructions_node: |
    Image Generation Guidelines: {image_generation_nodes_content}
    Game Object for Image:
    Name: {node_name}
    Description: {node_long_description}
    Rules: {node_rules}
    Type: {node_type}
    {type_specific_prompt_addition}
    Scene Context: {all_nodes_context}
    Chat History Context: {chat_history_context}
    Important: Generate content for adults only, never for very young people.
    Based on all the above, the image prompt is:
  base_prompt_default: |
    An image caption is needed for the following game object. The caption should be concise (max 2 sentences), describe what is visible NOW, and primarily use the object's longDescription, with some context from its "rules".
    {type_specific_prompt_addition}

    Game Object:
    Name: {node_name}
    Long Description: {node_long_description}
    Rules: {node_rules}
    Type: {node_type}

    Context (other nodes in scene): {all_nodes_context}
    Recent Chat History: {chat_history_context}

    The image caption is:
  type_specific_additions:
    character: " Depict the character clearly: appearance, attire, expression per description."
    item: " Present item/object on a plain or textured surface for standout."
    object: " Present item/object on a plain or textured surface for standout."
    concept: " Style image with mist/fog; abstract, metaphorical representation."
    mechanic: " Illustrate mechanic with symbolic/metaphorical visuals (e.g., fractured clocks for time, glowing glyphs for magic). Diamond shape composition."
    system: " Visualize system as intricate network, abstract gradients, or schematics for interconnectedness. Square shape composition."
    location: " Render location with distinct artistic style/mood; subtle unearthly/abstract elements for game aesthetic."
    event: " Capture event's dynamism/significance/mood with symbolic/abstract cues; focus on occurrence moment. Circular shape composition."
    assistant: " If character, depict as such. If abstract, use non-figurative visuals (e.g., glowing holographic interface, interconnected symbols)."
    image_generation: " Create metaphorical representation of image creation (e.g., light/color streams coalescing, digital canvas with dynamic abstract shapes)."
    library: " Depict as stylized knowledge repository (e.g., shelves of glowing tomes, abstract data hub with floating symbols)."
    default: ""

node_operations:
  get_relevant_nodes: |
    Based on the provided game nodes and user message history, the following JSON identifies the node IDs most relevant to the user's recent actions.

    Example:
    Given Nodes:
    ---
    id: "98ak"
    name: A playing card
    rules: The card has heavy wear and can be distinguished
    type: Card
    ---
    id: "10eg"
    name: A deck of cards
    rules: Only one card (the 10 of heart) is not mint.
    type: Object
    User message history:
    assistant: You are in a dark room and can only see one card
    user: take and observe the card
    The relevant node IDs would be:
    ```json
    {
      "relevantNodes": ["98ak"]
    }
    ```

    Now, for the current situation:
    Nodes:
    {nodes_description}

    User message history with the narrator:
    {string_history}

    The relevant node IDs are:
    ```json
    {
      "relevantNodes": [
  generate_chat_text: |
    Considering the current game state, recent interactions, and the player's input, the story continues with the following narrative. This narrative should be 3-4 paragraphs long, advance the plot, and reflect the game world's independent progression as well as player impact. It should not mention node updates or ask questions to the player, focusing instead on new content and avoiding repetition.

    Game Content Details:
    Current Nodes (sorted by relevance):
    {nodes_description}
    
    Recent Chat History (Last 5 Interactions):
    {string_history}
    
    {last_moxus_report_section}
    
    Player's Input: {user_input}
    
    The story unfolds as follows:
  generate_actions: |
    Based on the current game state, recent narrative, and the user's last input, here are two interesting follow-up actions for the player, presented in JSON format. These actions are designed to be natural continuations of the story.

    Current Game State:
    {nodes_description}

    Recent Narrative (Last 5 Interactions):
    {formatted_chat_text}
    
    {last_moxus_report_section}

    User's Last Input:
    {user_input}

    An example of the expected JSON output is: { "actions": ["examine the mysterious door", "ask the merchant about the strange artifact"] }

    The suggested actions are:
    ```json
    {
      "actions": [
  generate_node_edition: |
    {think_mode}
    The game graph is being updated based on the current game state, narrative, player actions, and input. Node content will be coherently updated, with a maximum of 3 node updates and a maximum of 1 new node.

    Node Properties Reminder:
    - id: Unique ID.
    - name: Title.
    - longDescription: Mandatory detailed player-visible info.
    - rules: Mandatory internal AI info (structured aspects: Character/World traits; Environment; Story elements; Game Mechanics; Story Gen hints).
    - type: Category (e.g., 'item', 'location'). Use from: 'assistant', 'image-generation', 'system', 'character', 'location', 'event', 'item', 'object', 'mechanic', 'concept', 'library'.
    - updateImage: Optional. True for physical entities needing visual update/representation, false for abstract/system nodes.

    Current Game State (sorted by relevance):
    {nodes_description}

    Recent Chat History (Last 5 Interactions):
    {formatted_chat_history}
    
    {last_moxus_report_section}

    Possible Actions:
    {actions_list}

    User Input:
    {user_input}

    The following JSON describes the node changes (updates to existing nodes or new nodes in the 'merge' array, and any deletions in the 'delete' array):
    ```json
    {
      "merge": [
  generate_nodes_from_prompt: |
    Game nodes are being updated or created based on the user's request for game/world changes. This is not a standard game round but a direct modification of game systems or world content.

    User Prompt:
    ---
    {user_prompt}
    ---
    {moxus_context_string}

    Existing Nodes:
    ---
    {nodes_description}
    ---

    Key Node Update Principles:
    - Updates replace nodes entirely; all content to be kept must be explicitly included.
    - `updateImage` is mandatory, set to true for significant visual changes (not for systems/lore).
    - For merges, update one existing node and delete others involved in the merge.
    - Nodes must have substantial content (full paragraph minimum). Consolidate sparse info.
    - Maintain few global system nodes; one should summarize all systems.
    - Do not update `image_generation` nodes unless explicitly instructed.
    - Nodes represent game systems, lore, characters, or objects, not temporary events.
    - Preferred Node Types: 'assistant', 'image-generation', 'system', 'character', 'location', 'event', 'item', 'object', 'mechanic', 'concept', 'library'.
    - Node Structure: Each node in the 'merge' list should follow: { "id": "unique-id", "name": "node_name", "longDescription": "...", "rules": "...", "type": "node_type", "updateImage": true_or_false }

    The resulting node changes are provided in the JSON format below, including nodes to merge/update/create and nodes to delete:
    ```json
    {
      "merge": [
  sort_nodes_by_relevance: |
    The following game nodes are to be sorted by their relevance to the recent chat history. The goal is to order them from most to least relevant to help focus the Story Generation AI. For example, the main character, then active characters, current location, and ongoing game systems might be prioritized.

    Recent Chat History (Last 5 Interactions):
    {string_history}
    
    {last_moxus_report_section}

    Nodes to Sort:
    {nodes_description}

    An example of the expected JSON output is: { "sortedIds": ["most_relevant_node_id", "next_relevant_node_id", ...] }

    The sorted node IDs are:
    ```json
    {
      "sortedIds": [